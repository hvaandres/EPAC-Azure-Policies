on:
  workflow_call:
    inputs:
      definitionsRootFolder:
        required: true
        type: string
      pacEnvironment:
        required: true
        type: string
      planFolder:
        required: true
        type: string
      epac_pinned_version:
        required: true
        type: string
      az_pinned_version:
        required: true
        type: string
      graph_pinned_version:
        required: true
        type: string
      resources_pinned_version:
        required: true
        type: string

jobs:
  epac-build:
    name: Build Deployment Plan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    outputs:
      CREATED_POL_PLAN: ${{ steps.checkPolicy.outputs.CREATED_POL_PLAN }}
    environment:
      name: ${{ inputs.pacEnvironment }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: OIDC Azure Login
        uses: Azure/login@v2
        with:
          client-id: ${{ vars.CLIENT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION_ID }}
          tenant-id: ${{ vars.TENANT_ID }}
          enable-AzPSSession: true

      - name: Install Required Azure Modules
        shell: pwsh
        run: |
          echo "Installing Azure modules..."
          Install-Module Az -RequiredVersion ${{ inputs.az_pinned_version }} -Force -AllowClobber
          Install-Module Az.ResourceGraph -RequiredVersion ${{ inputs.graph_pinned_version }} -Force -AllowClobber
          Install-Module Az.Resources -RequiredVersion ${{ inputs.resources_pinned_version }} -Force -AllowClobber

          $epacVersion = "${{ inputs.epac_pinned_version }}"
          if ($null -eq $epacVersion -or $epacVersion -eq 'latest') {
            Write-Output "No pinned version specified, using latest version of EnterprisePolicyAsCode."
            Install-Module EnterprisePolicyAsCode -AllowClobber -Force
          } else {
            Write-Output "Installing EnterprisePolicyAsCode version $epacVersion."
            Install-Module EnterprisePolicyAsCode -RequiredVersion $epacVersion -AllowClobber -Force
          }

      - name: Build Deployment Plan
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Build-DeploymentPlans `
              -definitionsRootFolder "${{ inputs.definitionsRootFolder }}" `
              -outputFolder "${{ inputs.planFolder }}" `
              -pacEnvironment "${{ inputs.pacEnvironment }}"
            $epacInfoStream | Set-Content body.txt
          azPSVersion: "latest"

      - name: Detect Deployment Plan
        shell: pwsh
        run: |
          if (Test-Path -Path "${{ inputs.planFolder }}") {
            echo "Deploy=true" >> $env:GITHUB_ENV
            if (-not (Get-ChildItem -Path "${{ inputs.planFolder }}" -Recurse -Include policy-plan.json)) {
              echo "RolesOnly=true" >> $env:GITHUB_ENV
            }
          } else {
            Write-Output "Plan folder not found."
          }

      - name: Check Policy Plan
        id: checkPolicy
        shell: pwsh
        run: |
          $policyPlanPath = "Output/plans-${{ inputs.pacEnvironment }}/policy-plan.json"
          if (Test-Path -Path $policyPlanPath) {
            Get-Content $policyPlanPath | ConvertFrom-Json | ConvertTo-Json -Depth 10
            echo "CREATED_POL_PLAN=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Output "Policy-Plan file does not exist."
            echo "CREATED_POL_PLAN=false" >> $env:GITHUB_OUTPUT
          }

      - name: Check Roles Plan
        shell: pwsh
        run: |
          $rolesPlanPath = "Output/plans-${{ inputs.pacEnvironment }}/roles-plan.json"
          if (Test-Path -Path $rolesPlanPath) {
            Get-Content $rolesPlanPath | ConvertFrom-Json | ConvertTo-Json -Depth 10
          } else {
            Write-Output "Roles-Plan file does not exist."
          }

      - name: Upload Deployment Plan as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: deploymentPlan
          path: Output
